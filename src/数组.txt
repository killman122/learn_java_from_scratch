数组可以存放多个同一类型的数据,数组也是一种数据类型,是引用类型


数组的使用:动态初始化
数组的定义
数据类型   数组名[] = new 数据类型[大小]
数据类型[] 数组名 = new 数据类型[大小]

int a[] = new int[5]
int[] a = new int[5]
以上两种都表示创建了一个数组,数组名是a,数组的长度为5,可以存放5个int型数据

数组的引用(使用):
数组名[下标/索引]比如:使用a数组的第三个数 a[2]

如果需要输出数组中的元素,只能通过数组的下标访问,使用for循环的方式,访问数组中的每个元素

另外一种的数组动态初始化的方法
先声明数组,在声明数组的时候还没有分配空间
语法:数据类型 数组名[]; 也可以 数据类型[] 数组名;
int a[];    int[] a;
创建数组
语法:数组名 = new 数据类型[大小];
a = new int[10];

数组创建的第三种方式静态初始化就是直接赋值,不先给予定量的空间
初始化数组
语法:数据类型  数组名[] = {元素值,元素值...}
int a[]={2,1,2,3,4,5}


在Java中一般的数据元素的赋值为值拷贝,但是在数组之间的相互赋值是地址是引用传递和python中变量的赋值相似貌似python中只要值相同,数据类型相同,内存中的地址就相同
int[] arr1 = {1,2,3}
int[] arr2 = arr1
arr2[0] = 10;
那么arr1[0] = 10;由于地址上的数据被更改所以arr两个都更改

但是如果在创建arr2[]数组的时候将数组的空间分配完,那么在之后使用的时候就能够将值复制传递给新的数组而不是传递的数组的地址

数组的反转:  在python中可以对列表对象使用reverse()函数反转/对字符串使用reversed的方式反转也可以但是需要使用''.join()方法添加


二维数组的使用方式
动态初始化
语法:类型[][] 数组名 = new 类型[大小][大小]
比如:int[][] a = new int[2][3]

动态初始化的方式2
先声明:类型 数组名[][];
在定义(开辟空间,这里需要使用new开辟)  数组名 = new 类型[大小][大小]
赋值(有默认值,在int数组中为0)

动态初始化的方式3(数组的列数不确定,一维数组的个数不一致)
只给出一半已知的行数/列数的空间使用new开辟,其余的在后面动态创建

静态初始化的方式创建二维数组
定义 类型 数组名[][] = {{},{},{},{}}
比如:int[][] arr = {{1,2,2},{1,2,3},{1,2,3,2}}
定义了一个二维数组arr
arr有三个元素(每个元素都是一维数组)
第一个一维数组有三个元素,第二个一维数组也有三个元素,第三个一维数组有4个元素


二维数组的使用细节和注意事项
一维数组的声明方式
int[] x; int x[];
二维数组的声明方式
int[][] x;  int x[][];  int[]y[];
