在Java程序中进行赋值或者是运算时,精度小的类型自动转换为精度大的数据类型,就是自动类型转换
char-->int-->long-->float-->double
byte-->short-->int-->long-->float-->double


int a='c';//对
double d=80;//对
System.out.println(a);//97
System.out.println(d);//80.0


强制类型转换
自动类型转换的逆过程,讲容量大的数据类型转换为容量小的数据类型,使用时要加上强制转换符(),但是可能造成精度降低或者溢出
int n1=(int)1.9//得到的值为1

强制转换符号只针对于最近的操作数有效,往往会使用小括号提升优先级
char类型可以保存int的常量值,但是不能保存int的变量值,需要强制类型转换
char c1 = 100;
int m = 100;
//char c2 = m;
char c3 = (char)m;//讲Unicode码为100的字符转换为char类型d
System.out.println(c2);

byte和short类型在进行运算时,当作int类型处理

short s=12;//对
s=s-9;//cuo,不能将int类型的数据赋值给short
byte b=10;//dui
b = b+11;//cuo,int-->byte
b=(byte)(b+11);


基本数据类型和String类型数据转换
int n1 =100;
float f1=1.1f;
double d1=4.5;
boolean b1 = true;
String s1 =n1+"";//在拼接后将数据转换为字符串


将字符串转为对应的基本数据类型
通过基本类型的包装类调用parseXX方法()
将xx类型的变量赋值为他的方法parseXX
Integer.parseInt("123");
Double.parseDouble("123.1")
Float.parseFloat("123.45")
Short.parseShort("12345")
Long.parseLong("12345")
Boolean.parseBoolean("true")
Byte.parseByte("12")